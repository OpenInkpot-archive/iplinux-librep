Source: librep
Section: interpreters
Priority: optional
Maintainer: Luis Rodrigo Gallardo Cruz <rodrigo@debian.org>
Standards-Version: 3.8.1
Build-Depends: texinfo (>= 4.11-2), debhelper (>= 6.0.7~), libgmp3-dev (>= 4.1.4-8),
 libgdbm-dev, libreadline-dev | libreadline5-dev, libncurses5-dev, libtool,
 dpatch, autotools-dev
Homepage: http://librep.sourceforge.net/

Package: librep9
Section: libs
Architecture: any
Depends: ${shlibs:Depends}
Suggests: librep-doc
Conflicts: rep (<= 0.17-11)
Replaces: rep (<= 0.17-11)
Description: lisp command interpreter 
 librep is a dialect of Lisp, designed to be used both as an extension
 language for applications and as a general purpose programming language.
 .
 It was originally written to be mostly-compatible with Emacs Lisp, but has
 subsequently diverged markedly. Its aim is to combine the best features of
 Scheme and Common Lisp and provide an environment that is comfortable for
 implementing both small and large scale systems. It tries to be a
 "pragmatic" programming language.

Package: librep-dev
Section: libdevel
Architecture: any
Depends: librep9 (>= ${source:Version}), libgmp3-dev, ${shlibs:Depends}
Replaces: librep9 (<= 0.16.1-1)
Description: development libraries and headers for librep
 librep is a dialect of Lisp, designed to be used both as an extension
 language for applications and as a general purpose programming language.
 .
 It was originally written to be mostly-compatible with Emacs Lisp, but has
 subsequently diverged markedly. Its aim is to combine the best features of
 Scheme and Common Lisp and provide an environment that is comfortable for
 implementing both small and large scale systems. It tries to be a
 "pragmatic" programming language.

Package: librep-doc
Section: doc
Architecture: all
Conflicts: rep-doc
Replaces: rep-doc
Description: documentation for the lisp command interpreter
 librep is a dialect of Lisp, designed to be used both as an extension
 language for applications and as a general purpose programming language.
 .
 It was originally written to be mostly-compatible with Emacs Lisp, but has
 subsequently diverged markedly. Its aim is to combine the best features of
 Scheme and Common Lisp and provide an environment that is comfortable for
 implementing both small and large scale systems. It tries to be a
 "pragmatic" programming language.
